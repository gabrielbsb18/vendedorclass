#include "totvs.ch"

/*/{Protheus.doc} VendedorClass
Classe para manipulaùùo de dados da tabela de vendedores
@since 17/07/2024
@version 1.0
Gabriel Dantas
/*/

class VendedorClass
    public data OPC_INC     as numeric
    public data OPC_ALT     as numeric
    public data OPC_EXC     as numeric

    public data cError      as character
    public data nOpc        as numeric

    private data cFilialVendedor      as character
    private data cCodigoVendedor      as character
    private data cNomeVendedor         as character
    private data cCodigoSupervisor    as character
    private data cNomeSupervisor      as character
    private data cCodigoGerente       as character
    private data cNomeGerente         as character
    private data cDddVendedor         as character
    private data cTelefoneVendedor    as character
    private data cEmailVendedor       as character
    private data cDddSupervisor       as character
    private data cTelefoneSupervisor  as character
    private data cEmailSupervisor     as character
    private data cDddGerente          as character
    private data cTelefoneGerente     as character
    private data cEmailGerente        as character

    public method new() constructor
    public method getID(cCodigoVendedor, cFilialVendedor) constructor
    public method setDadosVendedor()
    public method create(cCodigoVendedor, cFilialVendedor)
    public method update(cCodigoVendedor, cFilialVendedor)
    public method delete(cCodigoVendedor, cFilialVendedor)
    public method setDadosAuto()
    public method execAuto()
    public method openTable()

endclass

/*/{Protheus.doc} VendedorClass:new
Inicializa uma nova instùncia da classe VendedorClass
@since 17/07/2024
Gabriel Dantas
/*/

method new() class VendedorClass
    ::cError            := ""

    ::cFilialVendedor   := ""
    ::cCodigoVendedor   := ""
    ::cNomeVendedor     := ""
    ::cCodigoSupervisor := ""
    ::cNomeSupervisor   := ""
    ::cCodigoGerente    := ""
    ::cNomeGerente      := ""
return 

// MÈtodo para abrir a tabela SA3
method openTable() class VendedorClass
    if (!dbSelectArea("SA3"))
        dbUseArea(.T., "SA3", "SA3", .T., .F.)
    endif
return

/*/{Protheus.doc} VendedorClass:create
Cria um novo registro de vendedor
@param cCodigoVendedor Cùdigo do vendedor
@param cFilialVendedor Filial do vendedor
@since 17/07/2024
Gabriel Dantas
/*/

method create(cCodigoVendedor, cFilialVendedor) class VendedorClass
    default cCodigoVendedor := ""
    default cFilialVendedor := xFilial("01")

    ::cError := ""

    if (!empty(cCodigoVendedor))
        // Seleciona a ·rea de trabalho existente
        if (dbSelectArea("SA3") == 0)
            // Se o alias SA3 n„o estiver disponÌvel, usa dbUseArea para definir o alias
            dbUseArea(.T., "SA3", "SA3", .T., .F.)
        endif

        SA3->(dbSetOrder(1))

        // Verifica se o vendedor j· existe
        if (!SA3->(dbSeek(padr(cFilialVendedor, tamsx3("A3_FILIAL")[1]) + padr(cCodigoVendedor, tamsx3("A3_COD")[1]))))
            // Define os dados do vendedor
            ::cCodigoVendedor := cCodigoVendedor
            ::cFilialVendedor := cFilialVendedor
            ::cNomeVendedor := "Vendedor criado com sucesso"  // Ajuste conforme necess·rio
            ::cCodigoSupervisor := "Supervisor"  // Ajuste conforme necess·rio
            ::cCodigoGerente := "Gerente"  // Ajuste conforme necess·rio
            ::cDddVendedor := "DDD"  // Ajuste conforme necess·rio
            ::cTelefoneVendedor := "Telefone"  // Ajuste conforme necess·rio
            ::cEmailVendedor := "Email"  // Ajuste conforme necess·rio

            // Adiciona o novo registro
            dbAppend()
            SA3->A3_FILIAL := ::cFilialVendedor
            SA3->A3_COD := ::cCodigoVendedor
            SA3->A3_NOME := ::cNomeVendedor
            SA3->A3_SUPER := ::cCodigoSupervisor
            SA3->A3_GEREN := ::cCodigoGerente
            SA3->A3_DDDTEL := ::cDddVendedor
            SA3->A3_TEL := ::cTelefoneVendedor
            SA3->A3_EMAIL := ::cEmailVendedor

            // Salva as alteraÁıes
            dbCommit()
        else
            ::cError := "Vendedor j· existe."
        endif
    else
        ::cError := "CÛdigo do vendedor n„o pode ser vazio."
    endif
return

/*/{Protheus.doc} VendedorClass:getID
Obtùm os dados de um vendedor pelo cùdigo
@param cCodigoVendedor Cùdigo do vendedor
@param cFilialVendedor Filial do vendedor
@return Nome do vendedor
@since 17/07/2024
Gabriel Dantas
/*/

method getID(cCodigoVendedor, cFilialVendedor) class VendedorClass
    default cCodigoVendedor := ""
    default cFilialVendedor := xFilial("SA3")

    if (!empty(cCodigoVendedor))
        dbSelectArea("SA3")
        SA3->(dbSetOrder(1))
        if (SA3->(dbSeek(padr(cFilialVendedor, tamsx3("A3_FILIAL")[1]) + padr(cCodigoVendedor, tamsx3("A3_COD")[1]))))
            ::setDadosVendedor()
        else
            ::cError := "Vendedor nùo encontrado."
        endif
    else
        ::cError := "Cùdigo do vendedor nùo pode ser vazio."
    endif
return ::cNomeVendedor

/*/{Protheus.doc} VendedorClass:setDadosVendedor
Define os dados do vendedor na instùncia da classe
@since 17/07/2024
Gabriel Dantas
/*/

method setDadosVendedor() class VendedorClass
    ::cFilialVendedor    := SA3->A3_FILIAL
    ::cCodigoVendedor    := SA3->A3_COD
    ::cNomeVendedor      := SA3->A3_NOME
    ::cCodigoSupervisor  := SA3->A3_SUPER
    ::cCodigoGerente     := SA3->A3_GEREN
    ::cDddVendedor       := SA3->A3_DDDTEL
    ::cTelefoneVendedor  := SA3->A3_TEL
    ::cEmailVendedor     := SA3->A3_EMAIL

    if (SA3->(DbSeek(Padr(::cFilialVendedor, Tamsx3("A3_FILIAL")[1]) + Padr(::cCodigoSupervisor, Tamsx3("A3_COD")[1]))))
        ::cNomeSupervisor       := SA3->A3_NOME
        ::cDddSupervisor        := SA3->A3_DDDTEL
        ::cTelefoneSupervisor   := SA3->A3_TEL
        ::cEmailSupervisor      := SA3->A3_EMAIL
    endif

    if (!Empty(::cCodigoGerente))
        if (SA3->(DbSeek(Padr(::cFilialVendedor, Tamsx3("A3_FILIAL")[1]) + Padr(::cCodigoGerente, Tamsx3("A3_COD")[1]))))
            ::cNomeGerente      := SA3->A3_NOME
            ::cDddGerente       := SA3->A3_DDDTEL
            ::cTelefoneGerente  := SA3->A3_TEL
            ::cEmailGerente     := SA3->A3_EMAIL
        endif
    endif
return

/*/{Protheus.doc} VendedorClass:update
Atualiza os dados de um vendedor existente
@param cCodigoVendedor Cùdigo do vendedor
@param cFilialVendedor Filial do vendedor
@since 17/07/2024
Gabriel Dantas
/*/

method update(cCodigoVendedor, cFilialVendedor) class VendedorClass
    default cCodigoVendedor := ""
    default cFilialVendedor := xFilial("SA3")

    if (!empty(cCodigoVendedor))
        dbSelectArea("SA3")
        SA3->(dbSetOrder(1))
        if (SA3->(dbSeek(padr(cFilialVendedor, tamsx3("A3_FILIAL")[1]) + padr(cCodigoVendedor, tamsx3("A3_COD")[1]))))
            ::setDadosVendedor()
        else
            ::cError := "Vendedor nùo encontrado."
        endif
    else
        ::cError := "Cùdigo do vendedor nùo pode ser vazio."
    endif

    if (empty(::cError))
        ::nOpc := OPC_ALT
        ::setDadosAuto()
        ::execAuto()
    endif
return

/*/{Protheus.doc} VendedorClass:delete
Deleta um vendedor existente
@param cCodigoVendedor Cùdigo do vendedor
@param cFilialVendedor Filial do vendedor
@since 17/07/2024
Gabriel Dantas
/*/

method delete(cCodigoVendedor, cFilialVendedor) class VendedorClass
    default cCodigoVendedor := ""
    default cFilialVendedor := xFilial("SA3")

    if (!empty(cCodigoVendedor))
        dbSelectArea("SA3")
        SA3->(dbSetOrder(1))
        if (SA3->(dbSeek(padr(cFilialVendedor, tamsx3("A3_FILIAL")[1]) + padr(cCodigoVendedor, tamsx3("A3_COD")[1]))))
            ::setDadosVendedor()
        else
            ::cError := "Vendedor nùo encontrado."
        endif
    else
        ::cError := "Cùdigo do vendedor nùo pode ser vazio."
    endif

    if (empty(::cError))
        ::nOpc := OPC_EXC
        ::setDadosAuto()
        ::execAuto()
    endif
return



/*/{Protheus.doc} VendedorClass:execAuto
Executa operaùùes automùticas baseadas na opùùo selecionada
@since 17/07/2024
Gabriel Dantas
/*/

method execAuto() class VendedorClass
    // Implementaùùo da lùgica para executar operaùùes automùticas
    if (::nOpc == OPC_INC)
        dbAppend()
        // Cùdigo para adicionar o registro
    elseif (::nOpc == OPC_ALT)
        dbCommit()
        // Cùdigo para atualizar o registro
    elseif (::nOpc == OPC_EXC)
        dbDelete()
        // Cùdigo para deletar o registro
    endif
return
